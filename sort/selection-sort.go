package sort

// selectionSort 选择排序
// 「选择排序 selection sort」的工作原理：开启一个循环，每轮从未排序区间选择最小的元素，将其放到已排序区间的末尾。
//
// 流程如下：
// 1、设数组的长度为 n。
// 2、初始状态下，所有元素未排序，即未排序（索引）区间为 [0, n-1]。
// 3、选取区间 [0, n-1] 中的最小元素，将其与索引 0 处的元素交换。完成后，数组前 1 个元素已排序。
// 4、选取区间 [1, n-1] 中的最小元素，将其与索引 1 处的元素交换。完成后，数组前 2 个元素已排序。
// 5、以此类推。经过 n-1 轮选择与交换后，数组前 n-1 个元素已排序。
// 6、仅剩的一个元素必定是最大元素，无须排序，因此数组排序完成。
func selectionSort(nums []int) []int {
	// 外循环：未排序区间为 [i, n-1]
	for i := 0; i < len(nums)-1; i++ {

		// 内循环：找到未排序区间内的最小元素
		k := i // 未排序区间中，最小元素对应的索引位置
		for j := i + 1; j < len(nums); j++ {
			if nums[j] < nums[k] {
				k = j
			}
		}

		if i != k {
			nums[i], nums[k] = nums[k], nums[i]
		}
	}

	return nums
}
