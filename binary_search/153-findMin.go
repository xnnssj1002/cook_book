package binary_search

/*
153. 寻找旋转排序数组中的最小值

已知一个长度为 n 的数组，预先按照升序排列，经由 1 到 n 次 旋转 后，得到输入数组。例如，原数组 nums = [0,1,2,4,5,6,7] 在变化后可能得到：
若旋转 4 次，则可以得到 [4,5,6,7,0,1,2]
若旋转 7 次，则可以得到 [0,1,2,4,5,6,7]
注意，数组 [a[0], a[1], a[2], ..., a[n-1]] 旋转一次 的结果为数组 [a[n-1], a[0], a[1], a[2], ..., a[n-2]] 。

给你一个元素值 互不相同 的数组 nums ，它原来是一个升序排列的数组，并按上述情形进行了多次旋转。请你找出并返回数组中的 最小元素 。

你必须设计一个时间复杂度为 O(log n) 的算法解决此问题。

示例 1：
输入：nums = [3,4,5,1,2]
输出：1
解释：原数组为 [1,2,3,4,5] ，旋转 3 次得到输入数组。

示例 2：
输入：nums = [4,5,6,7,0,1,2]
输出：0
解释：原数组为 [0,1,2,4,5,6,7] ，旋转 4 次得到输入数组。

示例 3：
输入：nums = [11,13,15,17]
输出：11
解释：原数组为 [11,13,15,17] ，旋转 4 次得到输入数组。
*/

// findMin
//
// 针对数组中的最后一个元素 x有以下特性：
// 在拐点(最小值)右侧的元素（不包括最后一个元素本身），它们的值一定都严格小于 x；而在最小值左侧的元素，它们的值一定都严格大于 x。
//
// 通过中间点与右边点做判断
// 中间点 > high，则中间点落在了左边有顺序的部分
// 中间点 < high，则中间点落在了右边有顺序的部分
//
// 中间点 > low，则中间点落在了左侧有顺序的部分
// 中间点 < low，则中间点落在了右侧有顺序的部分
//
// 以上之所以没有 == 的情况，可以在二分查找的循环退出条件设为 low < high，则当最后数组长度为1时，就退出了循环
func findMin(nums []int) int {
	low, high := 0, len(nums)-1
	for low < high {
		mid := low + (high-low)>>1
		if nums[mid] < nums[high] {
			high = mid // 在右侧的话，中间值可能是最小值，也是小于high，所以需要取到这个中间值
		} else {
			low = mid + 1 // 在左侧的话，中间值一定不可能是最小值，所以中间值需要忽略掉
		}
	}

	return nums[low]
}
